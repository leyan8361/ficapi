<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fic.service.mapper.BetUserMapper">
  <resultMap id="BaseResultMap" type="com.fic.service.entity.BetUser">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="bet_scence_movie_id" jdbcType="INTEGER" property="betScenceMovieId" />
    <result column="bet_which" jdbcType="VARCHAR" property="betWhich" />
    <result column="bingo" jdbcType="TINYINT" property="bingo" />
    <result column="bingo_price" jdbcType="DECIMAL" property="bingoPrice" />
    <result column="close_with_returning" jdbcType="DECIMAL" property="closeWithReturning" />
    <result column="bet_fee" jdbcType="DECIMAL" property="betFee" />
    <result column="reserve_fee" jdbcType="DECIMAL" property="reserveFee" />
    <result column="bet_amount" jdbcType="DECIMAL" property="betAmount" />
    <result column="bet_week_total_box" jdbcType="DECIMAL" property="betWeekTotalBox" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, bet_scence_movie_id, bet_which, bingo, bingo_price, close_with_returning,
    bet_fee, reserve_fee, bet_amount, bet_week_total_box, created_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bet_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bet_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.fic.service.entity.BetUser">
    insert into bet_user (id, user_id, bet_scence_movie_id,
      bet_which, bingo, bingo_price,
      close_with_returning, bet_fee, reserve_fee,
      bet_amount, bet_week_total_box, created_time
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{betScenceMovieId,jdbcType=INTEGER},
      #{betWhich,jdbcType=VARCHAR}, #{bingo,jdbcType=TINYINT}, #{bingoPrice,jdbcType=DECIMAL},
      #{closeWithReturning,jdbcType=DECIMAL}, #{betFee,jdbcType=DECIMAL}, #{reserveFee,jdbcType=DECIMAL},
      #{betAmount,jdbcType=DECIMAL}, #{betWeekTotalBox,jdbcType=DECIMAL}, #{createdTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fic.service.entity.BetUser">
    insert into bet_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="betScenceMovieId != null">
        bet_scence_movie_id,
      </if>
      <if test="betWhich != null">
        bet_which,
      </if>
      <if test="bingo != null">
        bingo,
      </if>
      <if test="bingoPrice != null">
        bingo_price,
      </if>
      <if test="closeWithReturning != null">
        close_with_returning,
      </if>
      <if test="betFee != null">
        bet_fee,
      </if>
      <if test="reserveFee != null">
        reserve_fee,
      </if>
      <if test="betAmount != null">
        bet_amount,
      </if>
      <if test="betWeekTotalBox != null">
        bet_week_total_box,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="betScenceMovieId != null">
        #{betScenceMovieId,jdbcType=INTEGER},
      </if>
      <if test="betWhich != null">
        #{betWhich,jdbcType=VARCHAR},
      </if>
      <if test="bingo != null">
        #{bingo,jdbcType=TINYINT},
      </if>
      <if test="bingoPrice != null">
        #{bingoPrice,jdbcType=DECIMAL},
      </if>
      <if test="closeWithReturning != null">
        #{closeWithReturning,jdbcType=DECIMAL},
      </if>
      <if test="betFee != null">
        #{betFee,jdbcType=DECIMAL},
      </if>
      <if test="reserveFee != null">
        #{reserveFee,jdbcType=DECIMAL},
      </if>
      <if test="betAmount != null">
        #{betAmount,jdbcType=DECIMAL},
      </if>
      <if test="betWeekTotalBox != null">
        #{betWeekTotalBox,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fic.service.entity.BetUser">
    update bet_user
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="betScenceMovieId != null">
        bet_scence_movie_id = #{betScenceMovieId,jdbcType=INTEGER},
      </if>
      <if test="betWhich != null">
        bet_which = #{betWhich,jdbcType=VARCHAR},
      </if>
      <if test="bingo != null">
        bingo = #{bingo,jdbcType=TINYINT},
      </if>
      <if test="bingoPrice != null">
        bingo_price = #{bingoPrice,jdbcType=DECIMAL},
      </if>
      <if test="closeWithReturning != null">
        close_with_returning = #{closeWithReturning,jdbcType=DECIMAL},
      </if>
      <if test="betFee != null">
        bet_fee = #{betFee,jdbcType=DECIMAL},
      </if>
      <if test="reserveFee != null">
        reserve_fee = #{reserveFee,jdbcType=DECIMAL},
      </if>
      <if test="betAmount != null">
        bet_amount = #{betAmount,jdbcType=DECIMAL},
      </if>
      <if test="betWeekTotalBox != null">
        bet_week_total_box = #{betWeekTotalBox,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fic.service.entity.BetUser">
    update bet_user
    set user_id = #{userId,jdbcType=INTEGER},
      bet_scence_movie_id = #{betScenceMovieId,jdbcType=INTEGER},
      bet_which = #{betWhich,jdbcType=VARCHAR},
      bingo = #{bingo,jdbcType=TINYINT},
      bingo_price = #{bingoPrice,jdbcType=DECIMAL},
      close_with_returning = #{closeWithReturning,jdbcType=DECIMAL},
      bet_fee = #{betFee,jdbcType=DECIMAL},
      reserve_fee = #{reserveFee,jdbcType=DECIMAL},
      bet_amount = #{betAmount,jdbcType=DECIMAL},
      bet_week_total_box = #{betWeekTotalBox,jdbcType=DECIMAL},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="countOddEven" resultType="com.fic.service.Vo.BetOddEvenVo">
    SELECT
      sum(
          CASE
          WHEN u.bet_which = 0 THEN
              1
          ELSE
              0
          END
      ) oddCount,
      sum(
          CASE
          WHEN u.bet_which = 1 THEN
              1
          ELSE
              0
          END
      ) evenCount
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    LEFT JOIN bet_scence b ON b.id = sb.bet_scence_id
    LEFT JOIN bet_movie m ON m.id = sb.bet_movie_id
    WHERE
        sb.bet_scence_id = #{scenceId} and sb.bet_movie_id = #{movieId}
    AND sb.status = 0
  </select>

  <select id="countGuessOverEven" resultType="com.fic.service.Vo.BetGuessOverVo">
    SELECT
      sum(
          CASE
          WHEN u.bet_which = 2 THEN
              1
          ELSE
              0
          END
      ) canCount,
      sum(
          CASE
          WHEN u.bet_which = 3 THEN
              1
          ELSE
              0
          END
      ) couldntCount
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    LEFT JOIN bet_scence b ON b.id = sb.bet_scence_id
    LEFT JOIN bet_movie m ON m.id = sb.bet_movie_id
    WHERE
        sb.bet_scence_id = #{scenceId} and sb.bet_movie_id = #{movieId}
    AND sb.status = 0
  </select>

  <select id="countChooice" resultType="com.fic.service.Vo.BetChoiceVo">
    SELECT
      sum( CASE WHEN u.bet_which = 4 THEN 1 ELSE 0 END ) aChoice,
      sum( CASE WHEN u.bet_which = 5 THEN 1 ELSE 0 END ) bChoice,
      sum( CASE WHEN u.bet_which = 6 THEN 1 ELSE 0 END ) cChoice,
      sum( CASE WHEN u.bet_which = 7 THEN 1 ELSE 0 END ) dChoice FROM bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    LEFT JOIN bet_scence b ON b.id = sb.bet_scence_id
    LEFT JOIN bet_movie m ON m.id = sb.bet_movie_id WHERE sb.bet_scence_id = #{scenceId} and sb.bet_movie_id = #{movieId}
    AND sb.status = 0
  </select>

  <select id="countGuessTotalBox" resultType="int">
    SELECT
    sum( CASE WHEN u.bet_which > 100 THEN 1 ELSE 0 END ) FROM bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    LEFT JOIN bet_scence b ON b.id = sb.bet_scence_id
    LEFT JOIN bet_movie m ON m.id = sb.bet_movie_id WHERE sb.bet_scence_id = #{scenceId} and sb.bet_movie_id = #{movieId}
    AND sb.status = 0
  </select>

  <select id="countOddEvenAmount" resultType="com.fic.service.Vo.BetOddEvenAmountVo">
    SELECT
      sum(
				CASE
				when u.bet_which = 0
				then u.bet_amount
				else 0
				end
      ) oddFic,
      sum(
          CASE
          WHEN u.bet_which = 1
					THEN u.bet_amount
          ELSE 0
          END
      ) evenFic
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    WHERE
        sb.id = #{scenceMovieId}
    AND sb.status = 0 and u.bingo = 0
  </select>

  <select id="countGuessOverAmount" resultType="com.fic.service.Vo.BetGuessOverAmountVo">
    SELECT
      sum(
				CASE
				when u.bet_which = 2
				then u.bet_amount
				else 0
				end
      ) canFic,
      sum(
          CASE
          WHEN u.bet_which = 3
					THEN u.bet_amount
          ELSE 0
          END
      ) couldntFic
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    WHERE
        sb.id = #{scenceMovieId}
    AND sb.status = 0 and u.bingo = 0
  </select>

  <select id="countChoiceAmount" resultType="com.fic.service.Vo.BetChoiceAmountVo">
    SELECT
      sum(
				CASE
				when u.bet_which = 4
				then u.bet_amount
				else 0
				end
      ) aChoiceAmount,
      sum(
          CASE
          WHEN u.bet_which = 5
					THEN u.bet_amount
          ELSE 0
          END
      ) bChoiceAmount,
			sum(
          CASE
          WHEN u.bet_which = 6
					THEN u.bet_amount
          ELSE 0
          END
      ) cChoiceAmount,
			sum(
          CASE
          WHEN u.bet_which = 7
					THEN u.bet_amount
          ELSE 0
          END
      ) dChoiceAmount
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    WHERE
        sb.id = #{scenceMovieId}
    AND sb.status = 0 and u.bingo = 0
  </select>

  <select id="countWeekBoxGroupAmount" resultType="com.fic.service.Vo.BetWeekBoxCountVo">
    SELECT
         sum(u.bet_amount) as betAmount,
		 u.bet_week_total_box as weekBoxAmount
    FROM
        bet_user u
    INNER JOIN bet_scence_movie sb ON sb.id = u.bet_scence_movie_id
    WHERE
        sb.id = #{scenceMovieId}
    AND sb.status = 0  and u.bingo = 0
	  group by u.bet_week_total_box;
  </select>

  <select id="checkAlreadyBetUser" resultType="int">
    select count(*) from bet_user where bet_scence_movie_id = #{scenceMovieId};
  </select>
  
  <select id="findByScenceMovieId" resultMap="BaseResultMap">
    select * from bet_user where bet_scence_movie_id = #{scenceMovieId} and bingo = 0;
  </select>
  
  <select id="findAllByUserId" resultMap="BaseResultMap">
    select * from bet_user where user_id = #{userId} order by created_time desc;
  </select>

  <select id="findLastWeekAlreadyBet" resultType="com.fic.service.Vo.BetContinueBetUserVo">
    select count(u.user_id) as betCount,u.user_id as userId from bet_user u where u.created_time
    between #{startDay} and #{endDay}
    group by u.user_id having count(u.user_id) > 1 order by u.created_time desc
  </select>

  <select id="findlastWeekAlreadyBetByUserId" resultMap="BaseResultMap">
    select * from bet_user u  where u.created_time
    between #{startDay} and #{endDay} and u.user_id = #{userId} order by u.created_time desc
  </select>

  <select id="findByScenceMovieAndNotReturing" resultMap="BaseResultMap">
    select u.* from bet_user u where u.bet_scence_movie_id = #{scenceMovieId} and u.bingo = #{status};
  </select>
  <select id="findAllNotReturning" resultMap="BaseResultMap">
    select u.* from bet_user u where u.bingo = 4;
  </select>

  <select id="findAllWithoutStatusByScenceMovieId" resultMap="BaseResultMap">
    select u.* from bet_user u where u.bet_scence_movie_id = #{scenceMovieId};
  </select>

  <select id="findByBingoPriceAndUserId" resultMap="BaseResultMap">
    select u.* from bet_user u where u.bingo_price = #{bingoPrice} and u.user_id = #{userId} and u.created_time between #{startDay} and #{endDay}
    and u.id not in
    <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
       #{id}
    </foreach>
  </select>

  <select id="findByReturningAndUserId" resultMap="BaseResultMap">
    select u.* from bet_user u where u.close_with_returning = #{returning} and u.user_id = #{userId} and u.created_time between #{startDay} and #{endDay}
    and u.id not in
    <foreach item="id" index="index" collection="ids" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>

  <select id="findByBetAmountAndUserIdAndCreatedTime" resultMap="BaseResultMap">
    select u.* from bet_user u where u.bet_amount = #{amount} and u.user_id = #{userId} and u.created_time = #{createdTime};
  </select>

  <select id="findMovieNameById" resultType="string">
    select m.bet_movie_name from bet_user u
    left join bet_scence_movie sb on sb.id = u.bet_scence_movie_id
    left join bet_movie m on sb.bet_movie_id = m.id
    where u.id = #{id};
  </select>
</mapper>